name: Website Monitor

# Example configuration (edit these values to change the default monitoring settings)
env:
  DEFAULT_WEBSITE_URL: 'https://owaspblt.org'
  DEFAULT_KEYWORD: 'OWASP'

on:
  push:
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes
  workflow_dispatch:  # Allow manual triggering
    inputs:
      website_url:
        description: 'Website URL to monitor (default: https://owasp.org)'
        required: false
        default: 'https://owasp.org'
      keyword:
        description: 'Keyword to check for in website content (default: OWASP)'
        required: false
        default: 'OWASP'

# Set the permissions for the workflow
permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Monitor website
        id: monitor
        run: |
          start_time=$(date +%s%3N)
          content=$(curl -s "${{ github.event.inputs.website_url || env.DEFAULT_WEBSITE_URL }}")
          response_code=$(curl -s -o /dev/null -w "%{http_code}" "${{ github.event.inputs.website_url || env.DEFAULT_WEBSITE_URL }}")
          end_time=$(date +%s%3N)
          duration_ms=$((end_time - start_time))
          duration_s=$(awk "BEGIN {printf \"%.3f\", $duration_ms/1000}")
          
          if echo "$content" | grep -qi "${{ github.event.inputs.keyword || env.DEFAULT_KEYWORD }}"; then
            keyword_status="found"
          else
            keyword_status="not_found"
          fi
          
          if [ "$response_code" -eq 200 ] && [ "$keyword_status" == "found" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "duration_ms=$duration_ms" >> $GITHUB_OUTPUT
            echo "duration_s=$duration_s" >> $GITHUB_OUTPUT
            echo "keyword_status=found" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "duration_ms=$duration_ms" >> $GITHUB_OUTPUT
            echo "duration_s=$duration_s" >> $GITHUB_OUTPUT
            echo "keyword_status=$keyword_status" >> $GITHUB_OUTPUT
          fi

      - name: Update status file
        run: |
          if [ ! -f status.csv ]; then
            echo "duration_ms,duration_s,status,keyword_status" > status.csv
          fi
          echo "${{ steps.monitor.outputs.duration_ms }},${{ steps.monitor.outputs.duration_s }},${{ steps.monitor.outputs.status }},${{ steps.monitor.outputs.keyword_status }}" >> status.csv
          # Keep only last 30 rows (plus header)
          head -n 1 status.csv > status.csv.tmp
          tail -n 30 status.csv >> status.csv.tmp
          mv status.csv.tmp status.csv

      - name: Update index.html
        run: |
          last_check_human="$(date)"
          last_check_iso="$(date -Iseconds)"
          last_check_unix="$(date +%s)"
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            slack_configured="true"
          else
            slack_configured="false"
          fi
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Website Monitor</title>
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <style>
                  body { font-family: 'Inter', Arial, sans-serif; background: #f8fafc; color: #222; margin: 0; padding: 0; }
                  .container { max-width: 700px; margin: 40px auto; background: #fff; border-radius: 12px; box-shadow: 0 2px 16px #0001; padding: 32px 24px 24px 24px; }
                  h1 { font-size: 2.1em; margin-bottom: 0.2em; letter-spacing: -1px; }
                  .actions { margin: 18px 0 24px 0; display: flex; gap: 12px; flex-wrap: wrap; }
                  .button { background: #1976d2; color: #fff; border: none; padding: 10px 18px; border-radius: 6px; cursor: pointer; text-decoration: none; font-size: 1em; transition: background 0.2s; display: inline-block; }
                  .button:hover { background: #1565c0; }
                  .summary { display: flex; flex-wrap: wrap; gap: 24px; align-items: center; margin-bottom: 18px; }
                  .summary-block { flex: 1 1 180px; background: #f1f5f9; border-radius: 8px; padding: 18px 16px; text-align: center; }
                  .summary-block h2 { margin: 0 0 8px 0; font-size: 1.1em; color: #555; font-weight: 500; }
                  .summary-block .value { font-size: 1.5em; font-weight: 600; }
                  .badge { display: inline-block; padding: 4px 12px; border-radius: 12px; font-size: 0.98em; font-weight: 500; }
                  .badge-up { background: #e8f5e9; color: #2e7d32; }
                  .badge-down { background: #ffebee; color: #c62828; }
                  .badge-keyword { background: #e3f2fd; color: #1565c0; }
                  .badge-keyword-missing { background: #fff3cd; color: #b26a00; }
                  .ago { color: #888; font-size: 0.97em; }
                  .chart-container { background: #f1f5f9; border-radius: 8px; padding: 18px 12px 8px 12px; margin: 24px 0 18px 0; }
                  table { width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 0.98em; }
                  th, td { padding: 7px 8px; text-align: left; }
                  th { background: #f8fafc; color: #555; font-weight: 600; border-bottom: 2px solid #e0e7ef; }
                  tr:nth-child(even) { background: #f6fafd; }
                  tr:last-child td { border-bottom: none; }
                  .warning { background: #fff3cd; color: #856404; border: 1px solid #ffeeba; padding: 10px; border-radius: 5px; margin: 15px 0; }
                  details.instructions { margin: 15px 0; }
                  @media (max-width: 600px) {
                      .container { padding: 10px 2vw; }
                      .summary { flex-direction: column; gap: 12px; }
                  }
              </style>
          </head>
          <body>
          <div class="container">
              <h1>Website Monitor</h1>
              <a href="https://github.com/${{ github.repository }}/actions/workflows/website-monitor.yml" target="_blank" style="display:inline-block;margin-bottom:18px;">
                <img alt="Website Monitor Status" src="https://github.com/${{ github.repository }}/actions/workflows/website-monitor.yml/badge.svg">
              </a>
              <div class="actions">
                  <a class="button" href="https://github.com/${{ github.repository }}/actions/workflows/website-monitor.yml" target="_blank">Run Now</a>
                  <a class="button" href="https://github.com/${{ github.repository }}/edit/main/.github/workflows/website-monitor.yml" target="_blank">Edit Config</a>
                  <a class="button" href="https://github.com/${{ github.repository }}/actions/workflows/test-slack.yml" target="_blank">Test Slack Webhook</a>
                  <a class="button" href="https://github.com/${{ github.repository }}/blob/main/status.csv" target="_blank">View CSV Data</a>
              </div>
              <div id="slack-warning"></div>
              <div class="summary">
                  <div class="summary-block">
                      <h2>Last Check</h2>
                      <span class="value" id="last-check">LAST_CHECK_HUMAN_PLACEHOLDER</span>
                      <div class="ago" id="last-check-ago"></div>
                      <span id="last-check-iso" style="display:none;">LAST_CHECK_ISO_PLACEHOLDER</span>
                      <span id="last-check-unix" style="display:none;">LAST_CHECK_UNIX_PLACEHOLDER</span>
                  </div>
                  <div class="summary-block">
                      <h2>Response Time</h2>
                      <span class="value" id="resp-seconds">${{ steps.monitor.outputs.duration_s }}s</span><br>
                      <span class="ago" id="resp-ms">${{ steps.monitor.outputs.duration_ms }} ms</span>
                  </div>
                  <div class="summary-block">
                      <h2>Status</h2>
                      <span class="badge" id="status-badge"></span>
                  </div>
                  <div class="summary-block">
                      <h2>Keyword</h2>
                      <span class="badge" id="keyword-badge"></span>
                  </div>
              </div>
              <div class="chart-container">
                  <canvas id="statusChart"></canvas>
              </div>
              <div style="margin-top:18px;">
                  <h2 style="font-size:1.1em; margin-bottom:6px;">Recent Checks</h2>
                  <table id="recent-table">
                      <thead>
                          <tr><th>Resp. (ms)</th><th>Resp. (s)</th><th>Status</th><th>Keyword</th></tr>
                      </thead>
                      <tbody></tbody>
                  </table>
              </div>
              <details class="instructions">
                  <summary><b>How to set up Slack notifications</b></summary>
                  <ol>
                      <li>Go to your Slack workspace and create a new Slack App: <a href="https://api.slack.com/apps" target="_blank">https://api.slack.com/apps</a></li>
                      <li>Enable <b>Incoming Webhooks</b> for the app.</li>
                      <li>Create a new webhook URL and copy it.</li>
                      <li>Go to your GitHub repository settings &rarr; <b>Secrets and variables</b> &rarr; <b>Actions</b>.</li>
                      <li>Click <b>New repository secret</b> and add:<br>
                          <b>Name:</b> <code>SLACK_WEBHOOK_URL</code><br>
                          <b>Value:</b> (paste your Slack webhook URL)
                      </li>
                  </ol>
              </details>
          </div>
          <script>
              const slackConfigured = SLACK_CONFIGURED_PLACEHOLDER;
              // Show how long ago the last check was
              function timeAgo(date) {
                  const now = new Date();
                  const seconds = Math.floor((now - date) / 1000);
                  if (seconds < 60) return `${seconds} seconds ago`;
                  const minutes = Math.floor(seconds / 60);
                  if (minutes < 60) return `${minutes} minutes ago`;
                  const hours = Math.floor(minutes / 60);
                  if (hours < 24) return `${hours} hours ago`;
                  const days = Math.floor(hours / 24);
                  return `${days} days ago`;
              }
              const lastCheckIso = document.getElementById('last-check-iso').textContent;
              const lastCheckDate = new Date(lastCheckIso);
              document.getElementById('last-check-ago').textContent = timeAgo(lastCheckDate);

              // Show Slack warning if not configured
              if (!slackConfigured) {
                  document.getElementById('slack-warning').innerHTML = '<div class="warning">⚠️ <b>Slack notifications are not configured.</b> To enable alerts, set the <code>SLACK_WEBHOOK_URL</code> secret in your repository. See instructions below.</div>';
              }

              // Set status and keyword badges
              const status = "${{ steps.monitor.outputs.status }}";
              const keyword = "${{ steps.monitor.outputs.keyword_status }}";
              const statusBadge = document.getElementById('status-badge');
              if (status === 'success') {
                  statusBadge.textContent = 'Up';
                  statusBadge.className = 'badge badge-up';
              } else {
                  statusBadge.textContent = 'Down';
                  statusBadge.className = 'badge badge-down';
              }
              const keywordBadge = document.getElementById('keyword-badge');
              if (keyword === 'found') {
                  keywordBadge.textContent = 'Found';
                  keywordBadge.className = 'badge badge-keyword';
              } else {
                  keywordBadge.textContent = 'Not Found';
                  keywordBadge.className = 'badge badge-keyword-missing';
              }

              // Parse status.csv for chart and table
              function parseCSV(csv) {
                  const lines = csv.trim().split('\n');
                  const rows = lines.slice(1).map(l => l.split(','));
                  return rows;
              }
              fetch('status.csv').then(r => r.text()).then(csv => {
                  const rows = parseCSV(csv);
                  // Chart data
                  const labels = rows.map((_, i) => rows.length - i); // Use index as label
                  const data = rows.map(r => parseInt(r[0])); // ms
                  const bgColors = rows.map(r => (r[2]==='success' && r[3]==='found') ? '#4CAF50' : (r[2]==='success' ? '#FFC107' : '#f44336'));
                  // Chart.js
                  new Chart(document.getElementById('statusChart').getContext('2d'), {
                      type: 'line',
                      data: {
                          labels: labels,
                          datasets: [{
                              label: 'Response Time (ms)',
                              data: data,
                              fill: false,
                              borderColor: '#1976d2',
                              backgroundColor: '#1976d2',
                              pointBackgroundColor: bgColors,
                              pointRadius: 5,
                              tension: 0.2
                          }]
                      },
                      options: {
                          responsive: true,
                          plugins: { legend: { display: false } },
                          scales: {
                              y: { beginAtZero: true, title: { display: true, text: 'ms' } },
                              x: { title: { display: true, text: 'Check #' } }
                          }
                      }
                  });
                  // Table
                  const tbody = document.querySelector('#recent-table tbody');
                  tbody.innerHTML = '';
                  rows.slice(-10).reverse().forEach(r => {
                      const statusCell = r[2]==='success' ? '<span class="badge badge-up">Up</span>' : '<span class="badge badge-down">Down</span>';
                      const keywordCell = r[3]==='found' ? '<span class="badge badge-keyword">Found</span>' : '<span class="badge badge-keyword-missing">Not Found</span>';
                      tbody.innerHTML += `<tr><td>${r[0]} ms</td><td>${r[1]} s</td><td>${statusCell}</td><td>${keywordCell}</td></tr>`;
                  });
              });
          </script>
          </body>
          </html>
          EOF
          sed -i "s/SLACK_CONFIGURED_PLACEHOLDER/$slack_configured/" index.html
          sed -i "s|LAST_CHECK_HUMAN_PLACEHOLDER|$last_check_human|" index.html
          sed -i "s|LAST_CHECK_ISO_PLACEHOLDER|$last_check_iso|" index.html
          sed -i "s|LAST_CHECK_UNIX_PLACEHOLDER|$last_check_unix|" index.html
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add index.html status.csv
          git commit -m "Update website monitor status"
          git push

      - name: Notify Slack on failure
        if: steps.monitor.outputs.status == 'failure' || steps.monitor.outputs.keyword_status == 'not_found'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "⚠️ Website Monitor Alert\n${{ steps.monitor.outputs.status == 'failure' && 'Website is down!' || 'Keyword not found!' }}\nLast check: ${{ steps.monitor.outputs.duration_s }}s\nResponse time: ${{ steps.monitor.outputs.duration_s }} seconds\nKeyword status: ${{ steps.monitor.outputs.keyword_status }}\nWebsite: ${{ github.event.inputs.website_url || env.DEFAULT_WEBSITE_URL }}\nKeyword: ${{ github.event.inputs.keyword || env.DEFAULT_KEYWORD }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 
